@using MboxToPstBlazorApp.Services
@using MboxToPstBlazorApp.Models
@inject ChunkedUploadService UploadService

<div class="chunked-upload-component">
    <div class="mb-3">
        <label class="btn btn-outline-primary" for="@($"chunked-upload-{Id}")">
            <i class="bi bi-cloud-upload"></i> @ButtonText
        </label>
        <InputFile id="@($"chunked-upload-{Id}")" 
                  class="d-none" 
                  OnChange="OnFileSelected" 
                  accept="@AcceptedFileTypes" 
                  disabled="@IsUploading" />
    </div>

    @if (IsUploading)
    {
        <div class="upload-progress">
            <div class="d-flex justify-content-between mb-2">
                <span>@ProgressMessage</span>
                <span>@(ProgressPercentage.ToString("F1"))%</span>
            </div>
            <div class="progress mb-2">
                <div class="progress-bar progress-bar-striped progress-bar-animated" 
                     role="progressbar" 
                     style="width: @(ProgressPercentage)%">
                </div>
            </div>
            <small class="text-muted">
                Chunk @CurrentChunk | @FormatBytes(UploadedBytes) / @FormatBytes(TotalBytes)
                @if (ParsedEmailCount > 0)
                {
                    <span> | @ParsedEmailCount emails parsed</span>
                }
            </small>
        </div>
    }

    @if (!string.IsNullOrEmpty(StatusMessage))
    {
        <div class="alert @StatusAlertClass" role="alert">
            @StatusMessage
        </div>
    }
</div>

@code {
    [Parameter] public string Id { get; set; } = Guid.NewGuid().ToString();
    [Parameter] public string ButtonText { get; set; } = "Upload File";
    [Parameter] public string AcceptedFileTypes { get; set; } = ".mbox,.pst";
    [Parameter] public EventCallback<UploadCompletedEventArgs> OnUploadCompleted { get; set; }
    [Parameter] public EventCallback<UploadProgressEventArgs> OnUploadProgress { get; set; }

    private bool IsUploading = false;
    private double ProgressPercentage = 0;
    private long UploadedBytes = 0;
    private long TotalBytes = 0;
    private int CurrentChunk = 0;
    private int ParsedEmailCount = 0;
    private string ProgressMessage = string.Empty;
    private string StatusMessage = string.Empty;
    private string StatusAlertClass = string.Empty;
    private string? CurrentSessionId = null;

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        try
        {
            IsUploading = true;
            ProgressPercentage = 0;
            UploadedBytes = 0;
            TotalBytes = file.Size;
            CurrentChunk = 0;
            ParsedEmailCount = 0;
            StatusMessage = string.Empty;
            ProgressMessage = $"Starting upload of {file.Name}...";
            StateHasChanged();

            // Create upload session
            CurrentSessionId = await UploadService.CreateUploadSession(file.Name, file.Size);

            var progress = new Progress<UploadProgressInfo>(p =>
            {
                ProgressPercentage = p.ProgressPercentage;
                UploadedBytes = p.UploadedBytes;
                CurrentChunk = p.ChunkIndex;
                ParsedEmailCount = p.ParsedEmailCount;
                ProgressMessage = $"Uploading {file.Name}... chunk {p.ChunkIndex}";
                
                InvokeAsync(StateHasChanged);
                
                // Notify parent component of progress
                OnUploadProgress.InvokeAsync(new UploadProgressEventArgs
                {
                    SessionId = CurrentSessionId,
                    FileName = file.Name,
                    ProgressPercentage = p.ProgressPercentage,
                    UploadedBytes = p.UploadedBytes,
                    TotalBytes = p.TotalBytes,
                    ParsedEmailCount = p.ParsedEmailCount
                });
            });

            var result = await UploadService.UploadFileInChunks(file, CurrentSessionId, progress);

            if (result.Success)
            {
                StatusMessage = $"Successfully uploaded {file.Name}";
                StatusAlertClass = "alert-success";
                ProgressMessage = "Upload completed!";
                
                // Notify parent component of completion
                await OnUploadCompleted.InvokeAsync(new UploadCompletedEventArgs
                {
                    SessionId = CurrentSessionId,
                    FileName = file.Name,
                    Success = true,
                    TotalBytes = file.Size,
                    ParsedEmailCount = ParsedEmailCount
                });
            }
            else
            {
                StatusMessage = $"Upload failed: {result.Message}";
                StatusAlertClass = "alert-danger";
                ProgressMessage = "Upload failed!";
                
                await OnUploadCompleted.InvokeAsync(new UploadCompletedEventArgs
                {
                    SessionId = CurrentSessionId,
                    FileName = file.Name,
                    Success = false,
                    ErrorMessage = result.Message
                });
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Upload error: {ex.Message}";
            StatusAlertClass = "alert-danger";
            ProgressMessage = "Upload failed!";
            
            await OnUploadCompleted.InvokeAsync(new UploadCompletedEventArgs
            {
                SessionId = CurrentSessionId,
                FileName = file.Name,
                Success = false,
                ErrorMessage = ex.Message
            });
        }
        finally
        {
            IsUploading = false;
            StateHasChanged();
        }
    }

    private string FormatBytes(long bytes)
    {
        string[] suffixes = { "B", "KB", "MB", "GB", "TB" };
        int counter = 0;
        decimal number = bytes;
        while (Math.Round(number / 1024) >= 1)
        {
            number /= 1024;
            counter++;
        }
        return $"{number:N1} {suffixes[counter]}";
    }

    public class UploadCompletedEventArgs
    {
        public string? SessionId { get; set; }
        public string FileName { get; set; } = string.Empty;
        public bool Success { get; set; }
        public long TotalBytes { get; set; }
        public int ParsedEmailCount { get; set; }
        public string? ErrorMessage { get; set; }
    }

    public class UploadProgressEventArgs
    {
        public string? SessionId { get; set; }
        public string FileName { get; set; } = string.Empty;
        public double ProgressPercentage { get; set; }
        public long UploadedBytes { get; set; }
        public long TotalBytes { get; set; }
        public int ParsedEmailCount { get; set; }
    }
}